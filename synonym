#!/usr/bin/env bash
#
# MIT License
#
# Copyright (c) 2020 Matthieu Petiteau
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Finds synonyms for a given word in a specified language.
# Dependencies: jq and you will also need an API key from https://thesaurus.altervista.org/mykey
set -e

self=${0##*/}
version="$self v1.4.4"

show_help() {
  cat <<EOF
Usage: $self [OPTION] WORD

Find synonyms for a given word in a specified language.
Run $self -i for more information.

Options:
  -l LANG      Specify the language for synonyms.
               Supported languages: en, fr, cs, el, es, da, de,
               hu, it, no, pl, pt, ro, ru, sk
  -h           Show help message and exit.
  -i           Show detailed setup instructions and exit.
  -v           Show program version and exit.

EOF
}

show_info() {
  cat <<EOF
$self is a utility tool to find synonyms in different languages directly from the terminal.

Supported languages: en, fr, cs, el, es, da, de, hu, it, no, pl, pt, ro, ru, sk

Setup Instructions:
===================
1. Obtain an API key from https://thesaurus.altervista.org/mykey
2. Install jq: https://stedolan.github.io/jq/download/
3. Create a .synonymrc config file in:
   - \$XDG_CONFIG_HOME/.synonymrc
   - ~/.config/.synonymrc
   - ~/.synonymrc

Example .synonymrc:
===================
SYNONYM_THESAURUS_KEY=<API_KEY>
SYNONYM_SEARCH_LANG=en

Default language:
=================
If no language is specified, the script uses \$LANGUAGE or \$LANG as default.
Unsupported or unset languages default to en_US.

EOF
}

process_response() {
  local response="$1"

  # check for errors in the API response
  local error
  error=$(echo "$response" | jq -r '.error // empty')
  if [[ -n $error ]]; then
    echo "Error: $error" >&2
    exit 1
  fi

  # extract and clean synonyms
  echo "$response" |
    jq -r '.response[].list.synonyms' |
    tr '"' '|' |
    tr '|' '\n' |
    sed 's/([^)]*)//g' |
    sort -u |
    column -c "$(tput cols)"
}

# determine default language
get_default_language() {
  local os_lang=${LANGUAGE:-$LANG}
  os_lang=${os_lang%%.*}  # remove encoding (e.g., fr_FR.UTF-8 -> fr_FR)

  case $os_lang in
    cs_CZ|da_DK|de_DE|el_GR|en_US|es_ES|fr_FR|hu_HU|it_IT|no_NO|pl_PL|pt_PT|ro_RO|ru_RU|sk_SK)
      echo "$os_lang"
      ;;
    *)
      echo "en_US"
      ;;
  esac
}

# map short language codes to full codes
map_language() {
  case "$1" in
    en) echo "en_US" ;;
    fr) echo "fr_FR" ;;
    cs) echo "cs_CZ" ;;
    el) echo "el_GR" ;;
    es) echo "es_ES" ;;
    da) echo "da_DK" ;;
    de) echo "de_DE" ;;
    hu) echo "hu_HU" ;;
    it) echo "it_IT" ;;
    no) echo "no_NO" ;;
    pl) echo "pl_PL" ;;
    pt) echo "pt_PT" ;;
    ro) echo "ro_RO" ;;
    ru) echo "ru_RU" ;;
    sk) echo "sk_SK" ;;
    *)
      echo "Error: Unsupported language: $1" >&2
      exit 1
      ;;
  esac
}

load_config() {
  local config_files=(
    "$XDG_CONFIG_HOME/.synonymrc"
    "$HOME/.config/.synonymrc"
    "$HOME/.synonymrc"
  )

  for config_file in "${config_files[@]}"; do
    if [[ -f $config_file ]]; then
      # shellcheck source=/dev/null
      source "$config_file"
      return
    fi
  done

  echo "Error: .synonymrc not found. Run $self -i for setup information." >&2
  exit 1
}

validate_dependencies() {
  command -v jq >/dev/null 2>&1 || {
    echo "Error: jq is required but not installed. Visit https://stedolan.github.io/jq/download/" >&2
    exit 1
  }
}

main() {
  local language=""
  local word=""

  while getopts "l:hiv" option; do
    case "$option" in
      l) language=$(map_language "$OPTARG") ;;
      h) show_help; exit 0 ;;
      i) show_info; exit 0 ;;
      v) echo "$version"; exit 0 ;;
      *) show_help; exit 1 ;;
    esac
  done
  shift $((OPTIND - 1))

  word="$1"
  if [[ -z $word ]]; then
    echo "Error: Missing word to search." >&2
    show_help
    exit 1
  fi

  validate_dependencies
  load_config

  language=${language:-$(map_language "${SYNONYM_SEARCH_LANG:-$(get_default_language)}")}
  if [[ -z $SYNONYM_THESAURUS_KEY ]]; then
    echo "Error: API key not found in .synonymrc." >&2
    exit 1
  fi

  local api_url="https://thesaurus.altervista.org/thesaurus/v1?word=$word&language=$language&key=$SYNONYM_THESAURUS_KEY&output=json"
  local response
  response=$(curl -s "$api_url")

  process_response "$response"
}

main "$@"
